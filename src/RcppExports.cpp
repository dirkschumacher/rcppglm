// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "RcppGLM_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_make_gaussian
Rcpp::XPtr<Family::Gaussian> rcpp_make_gaussian(std::string link);
RcppExport SEXP _RcppGLM_rcpp_make_gaussian(SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_gaussian(link));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_binomial
Rcpp::XPtr<Family::Binomial> rcpp_make_binomial(std::string link);
RcppExport SEXP _RcppGLM_rcpp_make_binomial(SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_binomial(link));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_poisson
Rcpp::XPtr<Family::Poisson> rcpp_make_poisson(std::string link);
RcppExport SEXP _RcppGLM_rcpp_make_poisson(SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_poisson(link));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_glm_fit
arma::mat rcpp_glm_fit(const arma::mat& X, const arma::colvec& y, Rcpp::XPtr<Family::ExponentialFamily> family, int maxit, double tol);
RcppExport SEXP _RcppGLM_rcpp_glm_fit(SEXP XSEXP, SEXP ySEXP, SEXP familySEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<Family::ExponentialFamily> >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_glm_fit(X, y, family, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppGLM_rcpp_make_gaussian", (DL_FUNC) &_RcppGLM_rcpp_make_gaussian, 1},
    {"_RcppGLM_rcpp_make_binomial", (DL_FUNC) &_RcppGLM_rcpp_make_binomial, 1},
    {"_RcppGLM_rcpp_make_poisson", (DL_FUNC) &_RcppGLM_rcpp_make_poisson, 1},
    {"_RcppGLM_rcpp_glm_fit", (DL_FUNC) &_RcppGLM_rcpp_glm_fit, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppGLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
